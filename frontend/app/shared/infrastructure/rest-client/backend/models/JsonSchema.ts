/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AbstractJsonSchemaPropertyObject } from './AbstractJsonSchemaPropertyObject';
import {
    AbstractJsonSchemaPropertyObjectFromJSON,
    AbstractJsonSchemaPropertyObjectFromJSONTyped,
    AbstractJsonSchemaPropertyObjectToJSON,
    AbstractJsonSchemaPropertyObjectToJSONTyped,
} from './AbstractJsonSchemaPropertyObject';
import type { Item } from './Item';
import {
    ItemFromJSON,
    ItemFromJSONTyped,
    ItemToJSON,
    ItemToJSONTyped,
} from './Item';

/**
 * 
 * @export
 * @interface JsonSchema
 */
export interface JsonSchema {
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    description?: string;
    /**
     * 
     * @type {{ [key: string]: AbstractJsonSchemaPropertyObject; }}
     * @memberof JsonSchema
     */
    properties?: { [key: string]: AbstractJsonSchemaPropertyObject; };
    /**
     * 
     * @type {Array<string>}
     * @memberof JsonSchema
     */
    requiredProperties?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: Item; }}
     * @memberof JsonSchema
     */
    definitions?: { [key: string]: Item; };
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof JsonSchema
     */
    $schema?: string;
}

/**
 * Check if a given object implements the JsonSchema interface.
 */
export function instanceOfJsonSchema(value: object): value is JsonSchema {
    return true;
}

export function JsonSchemaFromJSON(json: any): JsonSchema {
    return JsonSchemaFromJSONTyped(json, false);
}

export function JsonSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): JsonSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'properties': json['properties'] == null ? undefined : (mapValues(json['properties'], AbstractJsonSchemaPropertyObjectFromJSON)),
        'requiredProperties': json['requiredProperties'] == null ? undefined : json['requiredProperties'],
        'definitions': json['definitions'] == null ? undefined : (mapValues(json['definitions'], ItemFromJSON)),
        'type': json['type'] == null ? undefined : json['type'],
        '$schema': json['$schema'] == null ? undefined : json['$schema'],
    };
}

export function JsonSchemaToJSON(json: any): JsonSchema {
    return JsonSchemaToJSONTyped(json, false);
}

export function JsonSchemaToJSONTyped(value?: JsonSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'properties': value['properties'] == null ? undefined : (mapValues(value['properties'], AbstractJsonSchemaPropertyObjectToJSON)),
        'requiredProperties': value['requiredProperties'],
        'definitions': value['definitions'] == null ? undefined : (mapValues(value['definitions'], ItemToJSON)),
        'type': value['type'],
        '$schema': value['$schema'],
    };
}

