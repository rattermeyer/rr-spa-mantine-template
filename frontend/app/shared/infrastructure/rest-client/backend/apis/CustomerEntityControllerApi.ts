/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CollectionModelEntityModelCustomer,
  CustomerRequestBody,
  EntityModelCustomer,
} from '../models/index';
import {
    CollectionModelEntityModelCustomerFromJSON,
    CollectionModelEntityModelCustomerToJSON,
    CustomerRequestBodyFromJSON,
    CustomerRequestBodyToJSON,
    EntityModelCustomerFromJSON,
    EntityModelCustomerToJSON,
} from '../models/index';

export interface DeleteItemResourceCustomerDeleteRequest {
    id: string;
}

export interface GetItemResourceCustomerGetRequest {
    id: string;
}

export interface PatchItemResourceCustomerPatchRequest {
    id: string;
    customerRequestBody: CustomerRequestBody;
}

export interface PostCollectionResourceCustomerPostRequest {
    customerRequestBody: CustomerRequestBody;
}

export interface PutItemResourceCustomerPutRequest {
    id: string;
    customerRequestBody: CustomerRequestBody;
}

/**
 * 
 */
export class CustomerEntityControllerApi extends runtime.BaseAPI {

    /**
     * delete-customer
     */
    async deleteItemResourceCustomerDeleteRaw(requestParameters: DeleteItemResourceCustomerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteItemResourceCustomerDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete-customer
     */
    async deleteItemResourceCustomerDelete(requestParameters: DeleteItemResourceCustomerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteItemResourceCustomerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * get-customer
     */
    async getCollectionResourceCustomerGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelCustomer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelEntityModelCustomerFromJSON(jsonValue));
    }

    /**
     * get-customer
     */
    async getCollectionResourceCustomerGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelCustomer> {
        const response = await this.getCollectionResourceCustomerGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * get-customer
     */
    async getItemResourceCustomerGetRaw(requestParameters: GetItemResourceCustomerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelCustomer>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getItemResourceCustomerGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelCustomerFromJSON(jsonValue));
    }

    /**
     * get-customer
     */
    async getItemResourceCustomerGet(requestParameters: GetItemResourceCustomerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelCustomer> {
        const response = await this.getItemResourceCustomerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * patch-customer
     */
    async patchItemResourceCustomerPatchRaw(requestParameters: PatchItemResourceCustomerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelCustomer>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling patchItemResourceCustomerPatch().'
            );
        }

        if (requestParameters['customerRequestBody'] == null) {
            throw new runtime.RequiredError(
                'customerRequestBody',
                'Required parameter "customerRequestBody" was null or undefined when calling patchItemResourceCustomerPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerRequestBodyToJSON(requestParameters['customerRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelCustomerFromJSON(jsonValue));
    }

    /**
     * patch-customer
     */
    async patchItemResourceCustomerPatch(requestParameters: PatchItemResourceCustomerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelCustomer | null | undefined > {
        const response = await this.patchItemResourceCustomerPatchRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * create-customer
     */
    async postCollectionResourceCustomerPostRaw(requestParameters: PostCollectionResourceCustomerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelCustomer>> {
        if (requestParameters['customerRequestBody'] == null) {
            throw new runtime.RequiredError(
                'customerRequestBody',
                'Required parameter "customerRequestBody" was null or undefined when calling postCollectionResourceCustomerPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerRequestBodyToJSON(requestParameters['customerRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelCustomerFromJSON(jsonValue));
    }

    /**
     * create-customer
     */
    async postCollectionResourceCustomerPost(requestParameters: PostCollectionResourceCustomerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelCustomer> {
        const response = await this.postCollectionResourceCustomerPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update-customer
     */
    async putItemResourceCustomerPutRaw(requestParameters: PutItemResourceCustomerPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelCustomer>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putItemResourceCustomerPut().'
            );
        }

        if (requestParameters['customerRequestBody'] == null) {
            throw new runtime.RequiredError(
                'customerRequestBody',
                'Required parameter "customerRequestBody" was null or undefined when calling putItemResourceCustomerPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerRequestBodyToJSON(requestParameters['customerRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelCustomerFromJSON(jsonValue));
    }

    /**
     * update-customer
     */
    async putItemResourceCustomerPut(requestParameters: PutItemResourceCustomerPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelCustomer | null | undefined > {
        const response = await this.putItemResourceCustomerPutRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 201:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

}
