// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { z } from "zod";

/** Identifier type for account */
export type Uuid = number & { __flavor?: "Uuid" };

/** Represents the table chinook.account */
export interface Account {
	/** Database type: pg_catalog.uuid */
	uuid: Uuid;

	/** Database type: pg_catalog.varchar */
	email: string;

	/** Database type: pg_catalog.varchar */
	name: string;

	/** Database type: pg_catalog.varchar */
	passwordHash: string;

	/** Database type: pg_catalog.bool */
	emailVerified: boolean;

	/** Database type: pg_catalog.jsonb */
	preferences: unknown;
}

/** Represents the initializer for the table chinook.account */
export interface AccountInitializer {
	/**
	 * Database type: pg_catalog.uuid
	 * Default value: uuid_generate_v7()
	 */
	uuid?: Uuid;

	/** Database type: pg_catalog.varchar */
	email: string;

	/** Database type: pg_catalog.varchar */
	name: string;

	/** Database type: pg_catalog.varchar */
	passwordHash: string;

	/**
	 * Database type: pg_catalog.bool
	 * Default value: false
	 */
	emailVerified?: boolean;

	/**
	 * Database type: pg_catalog.jsonb
	 * Default value: '{}'::jsonb
	 */
	preferences?: unknown;
}

/** Represents the mutator for the table chinook.account */
export interface AccountMutator {
	/** Database type: pg_catalog.uuid */
	uuid?: Uuid;

	/** Database type: pg_catalog.varchar */
	email?: string;

	/** Database type: pg_catalog.varchar */
	name?: string;

	/** Database type: pg_catalog.varchar */
	passwordHash?: string;

	/** Database type: pg_catalog.bool */
	emailVerified?: boolean;

	/** Database type: pg_catalog.jsonb */
	preferences?: unknown;
}

export const uuid = z.string() as unknown as z.Schema<Uuid>;

export const account = z.object({
	uuid: uuid,
	email: z.string(),
	name: z.string(),
	passwordHash: z.string(),
	emailVerified: z.boolean(),
	preferences: z.unknown(),
}) as unknown as z.Schema<Account>;

export const accountInitializer = z.object({
	uuid: uuid.optional(),
	email: z.string(),
	name: z.string(),
	passwordHash: z.string(),
	emailVerified: z.boolean().optional(),
	preferences: z.unknown().optional(),
}) as unknown as z.Schema<AccountInitializer>;

export const accountMutator = z.object({
	uuid: uuid.optional(),
	email: z.string().optional(),
	name: z.string().optional(),
	passwordHash: z.string().optional(),
	emailVerified: z.boolean().optional(),
	preferences: z.unknown().optional(),
}) as unknown as z.Schema<AccountMutator>;
