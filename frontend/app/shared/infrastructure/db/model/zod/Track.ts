// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { z } from "zod";
import { type AlbumId, albumId } from "./Album";
import { type GenreId, genreId } from "./Genre";
import { type MediaTypeId, mediaTypeId } from "./MediaType";

/** Identifier type for track */
export type TrackId = number & { __flavor?: "TrackId" };

/** Represents the table chinook.track */
export interface Track {
	/** Database type: pg_catalog.int4 */
	trackId: TrackId;

	/** Database type: pg_catalog.varchar */
	name: string;

	/** Database type: pg_catalog.int4 */
	albumId: AlbumId | null;

	/** Database type: pg_catalog.int4 */
	mediaTypeId: MediaTypeId;

	/** Database type: pg_catalog.int4 */
	genreId: GenreId | null;

	/** Database type: pg_catalog.varchar */
	composer: string | null;

	/** Database type: pg_catalog.int4 */
	milliseconds: number;

	/** Database type: pg_catalog.int4 */
	bytes: number | null;

	/** Database type: pg_catalog.numeric */
	unitPrice: string;
}

/** Represents the initializer for the table chinook.track */
export interface TrackInitializer {
	/**
	 * Database type: pg_catalog.int4
	 * Default value: nextval('track_track_id_seq'::regclass)
	 */
	trackId?: TrackId;

	/** Database type: pg_catalog.varchar */
	name: string;

	/** Database type: pg_catalog.int4 */
	albumId?: AlbumId | null;

	/** Database type: pg_catalog.int4 */
	mediaTypeId: MediaTypeId;

	/** Database type: pg_catalog.int4 */
	genreId?: GenreId | null;

	/** Database type: pg_catalog.varchar */
	composer?: string | null;

	/** Database type: pg_catalog.int4 */
	milliseconds: number;

	/** Database type: pg_catalog.int4 */
	bytes?: number | null;

	/** Database type: pg_catalog.numeric */
	unitPrice: string;
}

/** Represents the mutator for the table chinook.track */
export interface TrackMutator {
	/** Database type: pg_catalog.int4 */
	trackId?: TrackId;

	/** Database type: pg_catalog.varchar */
	name?: string;

	/** Database type: pg_catalog.int4 */
	albumId?: AlbumId | null;

	/** Database type: pg_catalog.int4 */
	mediaTypeId?: MediaTypeId;

	/** Database type: pg_catalog.int4 */
	genreId?: GenreId | null;

	/** Database type: pg_catalog.varchar */
	composer?: string | null;

	/** Database type: pg_catalog.int4 */
	milliseconds?: number;

	/** Database type: pg_catalog.int4 */
	bytes?: number | null;

	/** Database type: pg_catalog.numeric */
	unitPrice?: string;
}

export const trackId = z.number() as unknown as z.Schema<TrackId>;

export const track = z.object({
	trackId: trackId,
	name: z.string(),
	albumId: albumId.nullable(),
	mediaTypeId: mediaTypeId,
	genreId: genreId.nullable(),
	composer: z.string().nullable(),
	milliseconds: z.number(),
	bytes: z.number().nullable(),
	unitPrice: z.string(),
}) as unknown as z.Schema<Track>;

export const trackInitializer = z.object({
	trackId: trackId.optional(),
	name: z.string(),
	albumId: albumId.optional().nullable(),
	mediaTypeId: mediaTypeId,
	genreId: genreId.optional().nullable(),
	composer: z.string().optional().nullable(),
	milliseconds: z.number(),
	bytes: z.number().optional().nullable(),
	unitPrice: z.string(),
}) as unknown as z.Schema<TrackInitializer>;

export const trackMutator = z.object({
	trackId: trackId.optional(),
	name: z.string().optional(),
	albumId: albumId.optional().nullable(),
	mediaTypeId: mediaTypeId.optional(),
	genreId: genreId.optional().nullable(),
	composer: z.string().optional().nullable(),
	milliseconds: z.number().optional(),
	bytes: z.number().optional().nullable(),
	unitPrice: z.string().optional(),
}) as unknown as z.Schema<TrackMutator>;
